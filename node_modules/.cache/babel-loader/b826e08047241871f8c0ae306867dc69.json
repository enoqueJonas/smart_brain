{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OutOfCanvasUpdater = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nconst Utils_2 = require(\"./Utils\");\n\nclass OutOfCanvasUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n\n  isEnabled(particle) {\n    return !particle.destroyed && !particle.spawning;\n  }\n\n  update(particle, delta) {\n    var _a, _b, _c, _d;\n\n    const outModes = particle.options.move.outModes;\n    this.updateOutMode(particle, delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n    this.updateOutMode(particle, delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n    this.updateOutMode(particle, delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n    this.updateOutMode(particle, delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n  }\n\n  updateOutMode(particle, delta, outMode, direction) {\n    switch (outMode) {\n      case Enums_1.OutMode.bounce:\n      case Enums_1.OutMode.bounceVertical:\n      case Enums_1.OutMode.bounceHorizontal:\n      case \"bounceVertical\":\n      case \"bounceHorizontal\":\n      case Enums_1.OutMode.split:\n        this.bounce(particle, delta, direction, outMode);\n        break;\n\n      case Enums_1.OutMode.destroy:\n        this.destroy(particle, direction);\n        break;\n\n      case Enums_1.OutMode.out:\n        this.out(particle, direction);\n        break;\n\n      case Enums_1.OutMode.none:\n      default:\n        this.none(particle, direction);\n        break;\n    }\n  }\n\n  destroy(particle, direction) {\n    const container = this.container;\n\n    if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n      return;\n    }\n\n    container.particles.remove(particle, undefined, true);\n  }\n\n  out(particle, direction) {\n    const container = this.container;\n\n    if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n      return;\n    }\n\n    const wrap = particle.options.move.warp,\n          canvasSize = container.canvas.size,\n          newPos = {\n      bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n      left: -particle.getRadius() - particle.offset.x,\n      right: canvasSize.width + particle.getRadius() + particle.offset.x,\n      top: -particle.getRadius() - particle.offset.y\n    },\n          sizeValue = particle.getRadius(),\n          nextBounds = Utils_1.calculateBounds(particle.position, sizeValue);\n\n    if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width + particle.offset.x) {\n      particle.position.x = newPos.left;\n      particle.initialPosition.x = particle.position.x;\n\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n        particle.initialPosition.y = particle.position.y;\n      }\n    } else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n      particle.position.x = newPos.right;\n      particle.initialPosition.x = particle.position.x;\n\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n        particle.initialPosition.y = particle.position.y;\n      }\n    }\n\n    if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height + particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n        particle.initialPosition.x = particle.position.x;\n      }\n\n      particle.position.y = newPos.top;\n      particle.initialPosition.y = particle.position.y;\n    } else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n        particle.initialPosition.x = particle.position.x;\n      }\n\n      particle.position.y = newPos.bottom;\n      particle.initialPosition.y = particle.position.y;\n    }\n  }\n\n  bounce(particle, delta, direction, outMode) {\n    const container = this.container;\n    let handled = false;\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleBounce !== undefined) {\n        handled = plugin.particleBounce(particle, delta, direction);\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    if (handled) {\n      return;\n    }\n\n    const pos = particle.getPosition(),\n          offset = particle.offset,\n          size = particle.getRadius(),\n          bounds = Utils_1.calculateBounds(pos, size),\n          canvasSize = container.canvas.size;\n    Utils_2.bounceHorizontal({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n    Utils_2.bounceVertical({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n  }\n\n  none(particle, direction) {\n    if (particle.options.move.distance.horizontal && (direction === Enums_1.OutModeDirection.left || direction === Enums_1.OutModeDirection.right) || particle.options.move.distance.vertical && (direction === Enums_1.OutModeDirection.top || direction === Enums_1.OutModeDirection.bottom)) {\n      return;\n    }\n\n    const gravityOptions = particle.options.move.gravity,\n          container = this.container;\n    const canvasSize = container.canvas.size;\n    const pRadius = particle.getRadius();\n\n    if (!gravityOptions.enable) {\n      if (particle.velocity.y > 0 && particle.position.y <= canvasSize.height + pRadius || particle.velocity.y < 0 && particle.position.y >= -pRadius || particle.velocity.x > 0 && particle.position.x <= canvasSize.width + pRadius || particle.velocity.x < 0 && particle.position.x >= -pRadius) {\n        return;\n      }\n\n      if (!Utils_1.isPointInside(particle.position, container.canvas.size, pRadius, direction)) {\n        container.particles.remove(particle);\n      }\n    } else {\n      const position = particle.position;\n\n      if (!gravityOptions.inverse && position.y > canvasSize.height + pRadius && direction === Enums_1.OutModeDirection.bottom || gravityOptions.inverse && position.y < -pRadius && direction === Enums_1.OutModeDirection.top) {\n        container.particles.remove(particle);\n      }\n    }\n  }\n\n}\n\nexports.OutOfCanvasUpdater = OutOfCanvasUpdater;","map":{"version":3,"sources":["/Users/enoquejonas/Desktop/Web Projects/smart_brain/node_modules/tsparticles/Updaters/OutModes/OutOfCanvasUpdater.js"],"names":["Object","defineProperty","exports","value","OutOfCanvasUpdater","Utils_1","require","Enums_1","Utils_2","constructor","container","isEnabled","particle","destroyed","spawning","update","delta","_a","_b","_c","_d","outModes","options","move","updateOutMode","bottom","default","OutModeDirection","left","right","top","outMode","direction","OutMode","bounce","bounceVertical","bounceHorizontal","split","destroy","out","none","isPointInside","position","canvas","size","getRadius","particles","remove","undefined","wrap","warp","canvasSize","newPos","height","offset","y","x","width","sizeValue","nextBounds","calculateBounds","initialPosition","Math","random","handled","plugin","plugins","particleBounce","pos","getPosition","bounds","distance","horizontal","vertical","gravityOptions","gravity","pRadius","enable","velocity","inverse"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OutOfCanvasUpdater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nconst Utils_2 = require(\"./Utils\");\nclass OutOfCanvasUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning;\n    }\n    update(particle, delta) {\n        var _a, _b, _c, _d;\n        const outModes = particle.options.move.outModes;\n        this.updateOutMode(particle, delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n        this.updateOutMode(particle, delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n        this.updateOutMode(particle, delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n        this.updateOutMode(particle, delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n    }\n    updateOutMode(particle, delta, outMode, direction) {\n        switch (outMode) {\n            case Enums_1.OutMode.bounce:\n            case Enums_1.OutMode.bounceVertical:\n            case Enums_1.OutMode.bounceHorizontal:\n            case \"bounceVertical\":\n            case \"bounceHorizontal\":\n            case Enums_1.OutMode.split:\n                this.bounce(particle, delta, direction, outMode);\n                break;\n            case Enums_1.OutMode.destroy:\n                this.destroy(particle, direction);\n                break;\n            case Enums_1.OutMode.out:\n                this.out(particle, direction);\n                break;\n            case Enums_1.OutMode.none:\n            default:\n                this.none(particle, direction);\n                break;\n        }\n    }\n    destroy(particle, direction) {\n        const container = this.container;\n        if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            return;\n        }\n        container.particles.remove(particle, undefined, true);\n    }\n    out(particle, direction) {\n        const container = this.container;\n        if (Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n            return;\n        }\n        const wrap = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\n            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n            left: -particle.getRadius() - particle.offset.x,\n            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n            top: -particle.getRadius() - particle.offset.y,\n        }, sizeValue = particle.getRadius(), nextBounds = Utils_1.calculateBounds(particle.position, sizeValue);\n        if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width + particle.offset.x) {\n            particle.position.x = newPos.left;\n            particle.initialPosition.x = particle.position.x;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n                particle.initialPosition.y = particle.position.y;\n            }\n        }\n        else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n            particle.position.x = newPos.right;\n            particle.initialPosition.x = particle.position.x;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n                particle.initialPosition.y = particle.position.y;\n            }\n        }\n        if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height + particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n                particle.initialPosition.x = particle.position.x;\n            }\n            particle.position.y = newPos.top;\n            particle.initialPosition.y = particle.position.y;\n        }\n        else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n                particle.initialPosition.x = particle.position.x;\n            }\n            particle.position.y = newPos.bottom;\n            particle.initialPosition.y = particle.position.y;\n        }\n    }\n    bounce(particle, delta, direction, outMode) {\n        const container = this.container;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = Utils_1.calculateBounds(pos, size), canvasSize = container.canvas.size;\n        Utils_2.bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        Utils_2.bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n    none(particle, direction) {\n        if ((particle.options.move.distance.horizontal &&\n            (direction === Enums_1.OutModeDirection.left || direction === Enums_1.OutModeDirection.right)) ||\n            (particle.options.move.distance.vertical &&\n                (direction === Enums_1.OutModeDirection.top || direction === Enums_1.OutModeDirection.bottom))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container;\n        const canvasSize = container.canvas.size;\n        const pRadius = particle.getRadius();\n        if (!gravityOptions.enable) {\n            if ((particle.velocity.y > 0 && particle.position.y <= canvasSize.height + pRadius) ||\n                (particle.velocity.y < 0 && particle.position.y >= -pRadius) ||\n                (particle.velocity.x > 0 && particle.position.x <= canvasSize.width + pRadius) ||\n                (particle.velocity.x < 0 && particle.position.x >= -pRadius)) {\n                return;\n            }\n            if (!Utils_1.isPointInside(particle.position, container.canvas.size, pRadius, direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > canvasSize.height + pRadius &&\n                direction === Enums_1.OutModeDirection.bottom) ||\n                (gravityOptions.inverse && position.y < -pRadius && direction === Enums_1.OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\nexports.OutOfCanvasUpdater = OutOfCanvasUpdater;\n"]},"metadata":{},"sourceType":"script"}
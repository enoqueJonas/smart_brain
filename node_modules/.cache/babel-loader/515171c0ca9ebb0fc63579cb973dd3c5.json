{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbsorberInstance = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Vector_1 = require(\"../../Core/Particle/Vector\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nclass AbsorberInstance {\n  constructor(absorbers, container, options, position) {\n    var _a, _b, _c;\n\n    this.absorbers = absorbers;\n    this.container = container;\n    this.initialPosition = position ? Vector_1.Vector.create(position.x, position.y) : undefined;\n    this.options = options;\n    this.dragging = false;\n    this.name = this.options.name;\n    this.opacity = this.options.opacity;\n    this.size = Utils_1.getRangeValue(options.size.value) * container.retina.pixelRatio;\n    this.mass = this.size * options.size.density * container.retina.reduceFactor;\n    const limit = options.size.limit;\n    this.limit = limit !== undefined ? limit * container.retina.pixelRatio * container.retina.reduceFactor : limit;\n    const color = typeof options.color === \"string\" ? {\n      value: options.color\n    } : options.color;\n    this.color = (_a = Utils_1.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = (_c = (_b = this.initialPosition) === null || _b === void 0 ? void 0 : _b.copy()) !== null && _c !== void 0 ? _c : this.calcPosition();\n  }\n\n  attract(particle) {\n    const container = this.container;\n    const options = this.options;\n\n    if (options.draggable) {\n      const mouse = container.interactivity.mouse;\n\n      if (mouse.clicking && mouse.downPosition) {\n        const mouseDist = Utils_1.getDistance(this.position, mouse.downPosition);\n\n        if (mouseDist <= this.size) {\n          this.dragging = true;\n        }\n      } else {\n        this.dragging = false;\n      }\n\n      if (this.dragging && mouse.position) {\n        this.position.x = mouse.position.x;\n        this.position.y = mouse.position.y;\n      }\n    }\n\n    const pos = particle.getPosition();\n    const {\n      dx,\n      dy,\n      distance\n    } = Utils_1.getDistances(this.position, pos);\n    const v = Vector_1.Vector.create(dx, dy);\n    v.length = this.mass / Math.pow(distance, 2) * container.retina.reduceFactor;\n\n    if (distance < this.size + particle.getRadius()) {\n      const sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n\n      if (this.size > particle.getRadius() && distance < this.size - particle.getRadius() || particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0) {\n        if (options.destroy) {\n          particle.destroy();\n        } else {\n          particle.needsNewPosition = true;\n          this.updateParticlePosition(particle, v);\n        }\n      } else {\n        if (options.destroy) {\n          particle.size.value -= sizeFactor;\n        }\n\n        this.updateParticlePosition(particle, v);\n      }\n\n      if (this.limit === undefined || this.size < this.limit) {\n        this.size += sizeFactor;\n      }\n\n      this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n    } else {\n      this.updateParticlePosition(particle, v);\n    }\n  }\n\n  resize() {\n    const initialPosition = this.initialPosition;\n    this.position = initialPosition && Utils_1.isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n  }\n\n  draw(context) {\n    context.translate(this.position.x, this.position.y);\n    context.beginPath();\n    context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n    context.closePath();\n    context.fillStyle = Utils_1.getStyleFromRgb(this.color, this.opacity);\n    context.fill();\n  }\n\n  calcPosition() {\n    var _a, _b;\n\n    const container = this.container;\n    const percentPosition = this.options.position;\n    return Vector_1.Vector.create(((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100 * container.canvas.size.width, ((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100 * container.canvas.size.height);\n  }\n\n  updateParticlePosition(particle, v) {\n    var _a;\n\n    if (particle.destroyed) {\n      return;\n    }\n\n    const container = this.container;\n    const canvasSize = container.canvas.size;\n\n    if (particle.needsNewPosition) {\n      const pSize = particle.getRadius();\n      particle.position.x = (canvasSize.width - pSize * 2) * (1 + (Math.random() * 0.2 - 0.1)) + pSize;\n      particle.position.y = (canvasSize.height - pSize * 2) * (1 + (Math.random() * 0.2 - 0.1)) + pSize;\n      particle.needsNewPosition = false;\n    }\n\n    if (this.options.orbits) {\n      if (particle.absorberOrbit === undefined) {\n        particle.absorberOrbit = Vector_1.Vector.create(0, 0);\n        particle.absorberOrbit.length = Utils_1.getDistance(particle.getPosition(), this.position);\n        particle.absorberOrbit.angle = Math.random() * Math.PI * 2;\n      }\n\n      if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n        const minSize = Math.min(canvasSize.width, canvasSize.height);\n        particle.absorberOrbit.length = minSize * (1 + (Math.random() * 0.2 - 0.1));\n      }\n\n      if (particle.absorberOrbitDirection === undefined) {\n        particle.absorberOrbitDirection = particle.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise;\n      }\n\n      const orbitRadius = particle.absorberOrbit.length;\n      const orbitAngle = particle.absorberOrbit.angle;\n      const orbitDirection = particle.absorberOrbitDirection;\n      particle.velocity.x = 0;\n      particle.velocity.y = 0;\n      const updateFunc = {\n        x: orbitDirection === Enums_1.RotateDirection.clockwise ? Math.cos : Math.sin,\n        y: orbitDirection === Enums_1.RotateDirection.clockwise ? Math.sin : Math.cos\n      };\n      particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n      particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n      particle.absorberOrbit.length -= v.length;\n      particle.absorberOrbit.angle += ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : 0) * container.retina.pixelRatio / 100 * container.retina.reduceFactor;\n    } else {\n      const addV = Vector_1.Vector.origin;\n      addV.length = v.length;\n      addV.angle = v.angle;\n      particle.velocity.addTo(addV);\n    }\n  }\n\n}\n\nexports.AbsorberInstance = AbsorberInstance;","map":{"version":3,"sources":["/Users/enoquejonas/Desktop/Web Projects/facerecognitionbrain/node_modules/tsparticles/Plugins/Absorbers/AbsorberInstance.js"],"names":["Object","defineProperty","exports","value","AbsorberInstance","Utils_1","require","Vector_1","Enums_1","constructor","absorbers","container","options","position","_a","_b","_c","initialPosition","Vector","create","x","y","undefined","dragging","name","opacity","size","getRangeValue","retina","pixelRatio","mass","density","reduceFactor","limit","color","colorToRgb","b","g","r","copy","calcPosition","attract","particle","draggable","mouse","interactivity","clicking","downPosition","mouseDist","getDistance","pos","getPosition","dx","dy","distance","getDistances","v","length","Math","pow","getRadius","sizeFactor","absorberOrbit","destroy","needsNewPosition","updateParticlePosition","resize","isPointInside","canvas","draw","context","translate","beginPath","arc","PI","closePath","fillStyle","getStyleFromRgb","fill","percentPosition","random","width","height","destroyed","canvasSize","pSize","orbits","angle","minSize","min","absorberOrbitDirection","velocity","RotateDirection","clockwise","counterClockwise","orbitRadius","orbitAngle","orbitDirection","updateFunc","cos","sin","moveSpeed","addV","origin","addTo"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbsorberInstance = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Vector_1 = require(\"../../Core/Particle/Vector\");\nconst Enums_1 = require(\"../../Enums\");\nclass AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        var _a, _b, _c;\n        this.absorbers = absorbers;\n        this.container = container;\n        this.initialPosition = position ? Vector_1.Vector.create(position.x, position.y) : undefined;\n        this.options = options;\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = Utils_1.getRangeValue(options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * options.size.density * container.retina.reduceFactor;\n        const limit = options.size.limit;\n        this.limit = limit !== undefined ? limit * container.retina.pixelRatio * container.retina.reduceFactor : limit;\n        const color = typeof options.color === \"string\" ? { value: options.color } : options.color;\n        this.color = (_a = Utils_1.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = (_c = (_b = this.initialPosition) === null || _b === void 0 ? void 0 : _b.copy()) !== null && _c !== void 0 ? _c : this.calcPosition();\n    }\n    attract(particle) {\n        const container = this.container;\n        const options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = Utils_1.getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition();\n        const { dx, dy, distance } = Utils_1.getDistances(this.position, pos);\n        const v = Vector_1.Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, 2)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this.updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this.updateParticlePosition(particle, v);\n            }\n            if (this.limit === undefined || this.size < this.limit) {\n                this.size += sizeFactor;\n            }\n            this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n        }\n        else {\n            this.updateParticlePosition(particle, v);\n        }\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && Utils_1.isPointInside(initialPosition, this.container.canvas.size)\n                ? initialPosition\n                : this.calcPosition();\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = Utils_1.getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    calcPosition() {\n        var _a, _b;\n        const container = this.container;\n        const percentPosition = this.options.position;\n        return Vector_1.Vector.create((((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100) * container.canvas.size.width, (((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100) * container.canvas.size.height);\n    }\n    updateParticlePosition(particle, v) {\n        var _a;\n        if (particle.destroyed) {\n            return;\n        }\n        const container = this.container;\n        const canvasSize = container.canvas.size;\n        if (particle.needsNewPosition) {\n            const pSize = particle.getRadius();\n            particle.position.x = (canvasSize.width - pSize * 2) * (1 + (Math.random() * 0.2 - 0.1)) + pSize;\n            particle.position.y = (canvasSize.height - pSize * 2) * (1 + (Math.random() * 0.2 - 0.1)) + pSize;\n            particle.needsNewPosition = false;\n        }\n        if (this.options.orbits) {\n            if (particle.absorberOrbit === undefined) {\n                particle.absorberOrbit = Vector_1.Vector.create(0, 0);\n                particle.absorberOrbit.length = Utils_1.getDistance(particle.getPosition(), this.position);\n                particle.absorberOrbit.angle = Math.random() * Math.PI * 2;\n            }\n            if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                const minSize = Math.min(canvasSize.width, canvasSize.height);\n                particle.absorberOrbit.length = minSize * (1 + (Math.random() * 0.2 - 0.1));\n            }\n            if (particle.absorberOrbitDirection === undefined) {\n                particle.absorberOrbitDirection =\n                    particle.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise;\n            }\n            const orbitRadius = particle.absorberOrbit.length;\n            const orbitAngle = particle.absorberOrbit.angle;\n            const orbitDirection = particle.absorberOrbitDirection;\n            particle.velocity.x = 0;\n            particle.velocity.y = 0;\n            const updateFunc = {\n                x: orbitDirection === Enums_1.RotateDirection.clockwise ? Math.cos : Math.sin,\n                y: orbitDirection === Enums_1.RotateDirection.clockwise ? Math.sin : Math.cos,\n            };\n            particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n            particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n            particle.absorberOrbit.length -= v.length;\n            particle.absorberOrbit.angle +=\n                ((((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : 0) * container.retina.pixelRatio) / 100) * container.retina.reduceFactor;\n        }\n        else {\n            const addV = Vector_1.Vector.origin;\n            addV.length = v.length;\n            addV.angle = v.angle;\n            particle.velocity.addTo(addV);\n        }\n    }\n}\nexports.AbsorberInstance = AbsorberInstance;\n"]},"metadata":{},"sourceType":"script"}
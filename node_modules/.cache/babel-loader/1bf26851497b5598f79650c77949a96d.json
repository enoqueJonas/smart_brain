{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bubbler = void 0;\n\nconst Utils_1 = require(\"../../../Utils\");\n\nconst Enums_1 = require(\"../../../Enums\");\n\nconst ExternalInteractorBase_1 = require(\"../../../Core/ExternalInteractorBase\");\n\nconst ProcessBubbleType_1 = require(\"./ProcessBubbleType\");\n\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    const value = particleValue + (modeValue - optionsValue) * ratio;\n    return Utils_1.clamp(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    const value = particleValue - (optionsValue - modeValue) * ratio;\n    return Utils_1.clamp(value, modeValue, particleValue);\n  }\n}\n\nclass Bubbler extends ExternalInteractorBase_1.ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouse = container.interactivity.mouse,\n          events = options.interactivity.events,\n          divs = events.onDiv,\n          divBubble = Utils_1.isDivModeEnabled(Enums_1.DivMode.bubble, divs);\n\n    if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return Utils_1.isInArray(Enums_1.HoverMode.bubble, hoverMode) || Utils_1.isInArray(Enums_1.ClickMode.bubble, clickMode) || divBubble;\n  }\n\n  reset(particle, force) {\n    if (!(!particle.bubble.inRange || force)) {\n      return;\n    }\n\n    delete particle.bubble.div;\n    delete particle.bubble.opacity;\n    delete particle.bubble.radius;\n    delete particle.bubble.color;\n  }\n\n  interact() {\n    const options = this.container.actualOptions,\n          events = options.interactivity.events,\n          onHover = events.onHover,\n          onClick = events.onClick,\n          hoverEnabled = onHover.enable,\n          hoverMode = onHover.mode,\n          clickEnabled = onClick.enable,\n          clickMode = onClick.mode,\n          divs = events.onDiv;\n\n    if (hoverEnabled && Utils_1.isInArray(Enums_1.HoverMode.bubble, hoverMode)) {\n      this.hoverBubble();\n    } else if (clickEnabled && Utils_1.isInArray(Enums_1.ClickMode.bubble, clickMode)) {\n      this.clickBubble();\n    } else {\n      Utils_1.divModeExecute(Enums_1.DivMode.bubble, divs, (selector, div) => this.singleSelectorHover(selector, div));\n    }\n  }\n\n  singleSelectorHover(selector, div) {\n    const container = this.container,\n          selectors = document.querySelectorAll(selector);\n\n    if (!selectors.length) {\n      return;\n    }\n\n    selectors.forEach(item => {\n      const elem = item,\n            pxRatio = container.retina.pixelRatio,\n            pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      },\n            repulseRadius = elem.offsetWidth / 2 * pxRatio,\n            area = div.type === Enums_1.DivType.circle ? new Utils_1.Circle(pos.x, pos.y, repulseRadius) : new Utils_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n            query = container.particles.quadTree.query(area);\n\n      for (const particle of query) {\n        if (!area.contains(particle.getPosition())) {\n          continue;\n        }\n\n        particle.bubble.inRange = true;\n        const divs = container.actualOptions.interactivity.modes.bubble.divs;\n        const divBubble = Utils_1.divMode(divs, elem);\n\n        if (!particle.bubble.div || particle.bubble.div !== elem) {\n          this.reset(particle, true);\n          particle.bubble.div = elem;\n        }\n\n        this.hoverBubbleSize(particle, 1, divBubble);\n        this.hoverBubbleOpacity(particle, 1, divBubble);\n        this.hoverBubbleColor(particle, 1, divBubble);\n      }\n    });\n  }\n\n  process(particle, distMouse, timeSpent, data) {\n    const container = this.container,\n          bubbleParam = data.bubbleObj.optValue;\n\n    if (bubbleParam === undefined) {\n      return;\n    }\n\n    const options = container.actualOptions,\n          bubbleDuration = options.interactivity.modes.bubble.duration,\n          bubbleDistance = container.retina.bubbleModeDistance,\n          particlesParam = data.particlesObj.optValue,\n          pObjBubble = data.bubbleObj.value,\n          pObj = data.particlesObj.value || 0,\n          type = data.type;\n\n    if (bubbleParam === particlesParam) {\n      return;\n    }\n\n    if (!container.bubble.durationEnd) {\n      if (distMouse <= bubbleDistance) {\n        const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n\n        if (obj !== bubbleParam) {\n          const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n\n          if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n            particle.bubble.radius = value;\n          }\n\n          if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n            particle.bubble.opacity = value;\n          }\n        }\n      } else {\n        if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n          delete particle.bubble.radius;\n        }\n\n        if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n          delete particle.bubble.opacity;\n        }\n      }\n    } else if (pObjBubble) {\n      if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n        delete particle.bubble.radius;\n      }\n\n      if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n        delete particle.bubble.opacity;\n      }\n    }\n  }\n\n  clickBubble() {\n    const container = this.container,\n          options = container.actualOptions,\n          mouseClickPos = container.interactivity.mouse.clickPosition;\n\n    if (!mouseClickPos) {\n      return;\n    }\n\n    const distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n\n    for (const particle of query) {\n      if (!container.bubble.clicking) {\n        continue;\n      }\n\n      particle.bubble.inRange = !container.bubble.durationEnd;\n      const pos = particle.getPosition(),\n            distMouse = Utils_1.getDistance(pos, mouseClickPos),\n            timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n\n      if (timeSpent > options.interactivity.modes.bubble.duration) {\n        container.bubble.durationEnd = true;\n      }\n\n      if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n        container.bubble.clicking = false;\n        container.bubble.durationEnd = false;\n      }\n\n      const sizeData = {\n        bubbleObj: {\n          optValue: container.retina.bubbleModeSize,\n          value: particle.bubble.radius\n        },\n        particlesObj: {\n          optValue: Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n          value: particle.size.value\n        },\n        type: ProcessBubbleType_1.ProcessBubbleType.size\n      };\n      this.process(particle, distMouse, timeSpent, sizeData);\n      const opacityData = {\n        bubbleObj: {\n          optValue: options.interactivity.modes.bubble.opacity,\n          value: particle.bubble.opacity\n        },\n        particlesObj: {\n          optValue: Utils_1.getRangeMax(particle.options.opacity.value),\n          value: particle.opacity.value\n        },\n        type: ProcessBubbleType_1.ProcessBubbleType.opacity\n      };\n      this.process(particle, distMouse, timeSpent, opacityData);\n\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= container.retina.bubbleModeDistance) {\n          this.hoverBubbleColor(particle, distMouse);\n        } else {\n          delete particle.bubble.color;\n        }\n      } else {\n        delete particle.bubble.color;\n      }\n    }\n  }\n\n  hoverBubble() {\n    const container = this.container,\n          mousePos = container.interactivity.mouse.position;\n\n    if (mousePos === undefined) {\n      return;\n    }\n\n    const distance = container.retina.bubbleModeDistance,\n          query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n    for (const particle of query) {\n      particle.bubble.inRange = true;\n      const pos = particle.getPosition(),\n            pointDistance = Utils_1.getDistance(pos, mousePos),\n            ratio = 1 - pointDistance / distance;\n\n      if (pointDistance <= distance) {\n        if (ratio >= 0 && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n          this.hoverBubbleSize(particle, ratio);\n          this.hoverBubbleOpacity(particle, ratio);\n          this.hoverBubbleColor(particle, ratio);\n        }\n      } else {\n        this.reset(particle);\n      }\n\n      if (container.interactivity.status === Utils_1.Constants.mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  }\n\n  hoverBubbleSize(particle, ratio, divBubble) {\n    const container = this.container,\n          modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n\n    if (modeSize === undefined) {\n      return;\n    }\n\n    const optSize = Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n    const pSize = particle.size.value;\n    const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  }\n\n  hoverBubbleOpacity(particle, ratio, divBubble) {\n    var _a;\n\n    const container = this.container,\n          options = container.actualOptions,\n          modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n\n    if (!modeOpacity) {\n      return;\n    }\n\n    const optOpacity = particle.options.opacity.value;\n    const pOpacity = particle.opacity.value;\n    const opacity = calculateBubbleValue(pOpacity, modeOpacity, Utils_1.getRangeMax(optOpacity), ratio);\n\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  }\n\n  hoverBubbleColor(particle, ratio, divBubble) {\n    const options = this.container.actualOptions;\n    const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n\n    if (!particle.bubble.finalColor) {\n      const modeColor = bubbleOptions.color;\n\n      if (!modeColor) {\n        return;\n      }\n\n      const bubbleColor = modeColor instanceof Array ? Utils_1.itemFromArray(modeColor) : modeColor;\n      particle.bubble.finalColor = Utils_1.colorToHsl(bubbleColor);\n    }\n\n    if (!particle.bubble.finalColor) {\n      return;\n    }\n\n    if (bubbleOptions.mix) {\n      particle.bubble.color = undefined;\n      const pColor = particle.getFillColor();\n      particle.bubble.color = pColor ? Utils_1.rgbToHsl(Utils_1.colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n    } else {\n      particle.bubble.color = particle.bubble.finalColor;\n    }\n  }\n\n}\n\nexports.Bubbler = Bubbler;","map":{"version":3,"sources":["/Users/enoquejonas/Desktop/Web Projects/smart_brain/node_modules/tsparticles/Interactions/External/Bubble/Bubbler.js"],"names":["Object","defineProperty","exports","value","Bubbler","Utils_1","require","Enums_1","ExternalInteractorBase_1","ProcessBubbleType_1","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","clamp","ExternalInteractorBase","constructor","container","isEnabled","options","actualOptions","mouse","interactivity","events","divs","onDiv","divBubble","isDivModeEnabled","DivMode","bubble","onHover","enable","position","onClick","clickPosition","hoverMode","mode","clickMode","isInArray","HoverMode","ClickMode","reset","particle","force","inRange","div","opacity","radius","color","interact","hoverEnabled","clickEnabled","hoverBubble","clickBubble","divModeExecute","selector","singleSelectorHover","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","retina","pixelRatio","pos","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","type","DivType","circle","Circle","Rectangle","query","particles","quadTree","contains","getPosition","modes","divMode","hoverBubbleSize","hoverBubbleOpacity","hoverBubbleColor","process","distMouse","timeSpent","data","bubbleParam","bubbleObj","optValue","undefined","bubbleDuration","duration","bubbleDistance","bubbleModeDistance","particlesParam","particlesObj","pObjBubble","pObj","durationEnd","obj","ProcessBubbleType","size","mouseClickPos","distance","queryCircle","clicking","getDistance","Date","getTime","clickTime","sizeData","bubbleModeSize","getRangeMax","opacityData","mousePos","pointDistance","status","Constants","mouseMoveEvent","mouseLeaveEvent","modeSize","optSize","pSize","_a","modeOpacity","optOpacity","pOpacity","bubbleOptions","finalColor","modeColor","bubbleColor","Array","itemFromArray","colorToHsl","mix","pColor","getFillColor","rgbToHsl","colorMix"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bubbler = void 0;\nconst Utils_1 = require(\"../../../Utils\");\nconst Enums_1 = require(\"../../../Enums\");\nconst ExternalInteractorBase_1 = require(\"../../../Core/ExternalInteractorBase\");\nconst ProcessBubbleType_1 = require(\"./ProcessBubbleType\");\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return Utils_1.clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return Utils_1.clamp(value, modeValue, particleValue);\n    }\n}\nclass Bubbler extends ExternalInteractorBase_1.ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = options.interactivity.events, divs = events.onDiv, divBubble = Utils_1.isDivModeEnabled(Enums_1.DivMode.bubble, divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return Utils_1.isInArray(Enums_1.HoverMode.bubble, hoverMode) || Utils_1.isInArray(Enums_1.ClickMode.bubble, clickMode) || divBubble;\n    }\n    reset(particle, force) {\n        if (!(!particle.bubble.inRange || force)) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    interact() {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && Utils_1.isInArray(Enums_1.HoverMode.bubble, hoverMode)) {\n            this.hoverBubble();\n        }\n        else if (clickEnabled && Utils_1.isInArray(Enums_1.ClickMode.bubble, clickMode)) {\n            this.clickBubble();\n        }\n        else {\n            Utils_1.divModeExecute(Enums_1.DivMode.bubble, divs, (selector, div) => this.singleSelectorHover(selector, div));\n        }\n    }\n    singleSelectorHover(selector, div) {\n        const container = this.container, selectors = document.querySelectorAll(selector);\n        if (!selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === Enums_1.DivType.circle\n                ? new Utils_1.Circle(pos.x, pos.y, repulseRadius)\n                : new Utils_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area);\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = container.actualOptions.interactivity.modes.bubble.divs;\n                const divBubble = Utils_1.divMode(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.reset(particle, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, 1, divBubble);\n            }\n        });\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container, bubbleParam = data.bubbleObj.optValue;\n        if (bubbleParam === undefined) {\n            return;\n        }\n        const options = container.actualOptions, bubbleDuration = options.interactivity.modes.bubble.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n        if (bubbleParam === particlesParam) {\n            return;\n        }\n        if (!container.bubble.durationEnd) {\n            if (distMouse <= bubbleDistance) {\n                const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                    const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                    if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n                        particle.bubble.radius = value;\n                    }\n                    if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n                        particle.bubble.opacity = value;\n                    }\n                }\n            }\n            else {\n                if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n                    delete particle.bubble.radius;\n                }\n                if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n        else if (pObjBubble) {\n            if (type === ProcessBubbleType_1.ProcessBubbleType.size) {\n                delete particle.bubble.radius;\n            }\n            if (type === ProcessBubbleType_1.ProcessBubbleType.opacity) {\n                delete particle.bubble.opacity;\n            }\n        }\n    }\n    clickBubble() {\n        const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition;\n        if (!mouseClickPos) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition(), distMouse = Utils_1.getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > options.interactivity.modes.bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: ProcessBubbleType_1.ProcessBubbleType.size,\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: options.interactivity.modes.bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: Utils_1.getRangeMax(particle.options.opacity.value),\n                    value: particle.opacity.value,\n                },\n                type: ProcessBubbleType_1.ProcessBubbleType.opacity,\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= container.retina.bubbleModeDistance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble() {\n        const container = this.container, mousePos = container.interactivity.mouse.position;\n        if (mousePos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition(), pointDistance = Utils_1.getDistance(pos, mousePos), ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === Utils_1.Constants.mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container, modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a;\n        const container = this.container, options = container.actualOptions, modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n        if (!modeOpacity) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = particle.opacity.value;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, Utils_1.getRangeMax(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleColor(particle, ratio, divBubble) {\n        const options = this.container.actualOptions;\n        const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n        if (!particle.bubble.finalColor) {\n            const modeColor = bubbleOptions.color;\n            if (!modeColor) {\n                return;\n            }\n            const bubbleColor = modeColor instanceof Array ? Utils_1.itemFromArray(modeColor) : modeColor;\n            particle.bubble.finalColor = Utils_1.colorToHsl(bubbleColor);\n        }\n        if (!particle.bubble.finalColor) {\n            return;\n        }\n        if (bubbleOptions.mix) {\n            particle.bubble.color = undefined;\n            const pColor = particle.getFillColor();\n            particle.bubble.color = pColor\n                ? Utils_1.rgbToHsl(Utils_1.colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                : particle.bubble.finalColor;\n        }\n        else {\n            particle.bubble.color = particle.bubble.finalColor;\n        }\n    }\n}\nexports.Bubbler = Bubbler;\n"]},"metadata":{},"sourceType":"script"}
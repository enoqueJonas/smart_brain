{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nfunction applyDistance(particle) {\n  const initialPosition = particle.initialPosition;\n  const {\n    dx,\n    dy\n  } = Utils_1.getDistances(initialPosition, particle.position);\n  const dxFixed = Math.abs(dx),\n        dyFixed = Math.abs(dy);\n  const hDistance = particle.maxDistance.horizontal;\n  const vDistance = particle.maxDistance.vertical;\n\n  if (!hDistance && !vDistance) {\n    return;\n  }\n\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    const pos = particle.position,\n          vel = particle.velocity;\n\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -Math.random();\n    }\n\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -Math.random();\n    }\n  }\n}\n\nclass Mover {\n  constructor(container) {\n    this.container = container;\n  }\n\n  move(particle, delta) {\n    if (particle.destroyed) {\n      return;\n    }\n\n    this.moveParticle(particle, delta);\n    this.moveParallax(particle);\n  }\n\n  moveParticle(particle, delta) {\n    var _a, _b, _c;\n\n    const particleOptions = particle.options;\n    const moveOptions = particleOptions.move;\n\n    if (!moveOptions.enable) {\n      return;\n    }\n\n    const container = this.container,\n          slowFactor = this.getProximitySpeedFactor(particle),\n          baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : particle.moveSpeed = Utils_1.getRangeValue(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n          moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : particle.moveDrift = Utils_1.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio,\n          maxSize = Utils_1.getRangeMax(particleOptions.size.value) * container.retina.pixelRatio,\n          sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n          diffFactor = 2,\n          speedFactor = sizeFactor * slowFactor * delta.factor / diffFactor,\n          moveSpeed = baseSpeed * speedFactor;\n    this.applyPath(particle, delta);\n    const gravityOptions = moveOptions.gravity;\n    const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n\n    if (gravityOptions.enable) {\n      particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n    }\n\n    if (moveDrift && moveSpeed) {\n      particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n    }\n\n    const decay = 1 - particle.options.move.decay;\n\n    if (decay != 1) {\n      particle.velocity.multTo(decay);\n    }\n\n    const velocity = particle.velocity.mult(moveSpeed);\n    const maxSpeed = (_c = particle.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n\n    if (gravityOptions.enable && gravityOptions.maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n      velocity.y = gravityFactor * maxSpeed;\n\n      if (moveSpeed) {\n        particle.velocity.y = velocity.y / moveSpeed;\n      }\n    }\n\n    const zIndexOptions = particle.options.zIndex,\n          zVelocityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.velocityRate);\n\n    if (moveOptions.spin.enable) {\n      this.spin(particle, moveSpeed);\n    } else {\n      if (zVelocityFactor != 1) {\n        velocity.multTo(zVelocityFactor);\n      }\n\n      particle.position.addTo(velocity);\n\n      if (moveOptions.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n    }\n\n    applyDistance(particle);\n  }\n\n  spin(particle, moveSpeed) {\n    const container = this.container;\n\n    if (!particle.spin) {\n      return;\n    }\n\n    const updateFunc = {\n      x: particle.spin.direction === Enums_1.RotateDirection.clockwise ? Math.cos : Math.sin,\n      y: particle.spin.direction === Enums_1.RotateDirection.clockwise ? Math.sin : Math.cos\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n\n    if (particle.spin.radius > maxCanvasSize / 2) {\n      particle.spin.radius = maxCanvasSize / 2;\n      particle.spin.acceleration *= -1;\n    } else if (particle.spin.radius < 0) {\n      particle.spin.radius = 0;\n      particle.spin.acceleration *= -1;\n    }\n\n    particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);\n  }\n\n  applyPath(particle, delta) {\n    const particlesOptions = particle.options;\n    const pathOptions = particlesOptions.move.path;\n    const pathEnabled = pathOptions.enable;\n\n    if (!pathEnabled) {\n      return;\n    }\n\n    const container = this.container;\n\n    if (particle.lastPathTime <= particle.pathDelay) {\n      particle.lastPathTime += delta.value;\n      return;\n    }\n\n    let generator = container.pathGenerator;\n\n    if (pathOptions.generator) {\n      const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n\n      if (customGenerator) {\n        generator = customGenerator;\n      }\n    }\n\n    const path = generator.generate(particle);\n    particle.velocity.addTo(path);\n\n    if (pathOptions.clamp) {\n      particle.velocity.x = Utils_1.clamp(particle.velocity.x, -1, 1);\n      particle.velocity.y = Utils_1.clamp(particle.velocity.y, -1, 1);\n    }\n\n    particle.lastPathTime -= particle.pathDelay;\n  }\n\n  moveParallax(particle) {\n    const container = this.container;\n    const options = container.actualOptions;\n\n    if (Utils_1.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n      return;\n    }\n\n    const parallaxForce = options.interactivity.events.onHover.parallax.force;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const canvasCenter = {\n      x: container.canvas.size.width / 2,\n      y: container.canvas.size.height / 2\n    };\n    const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n    const factor = particle.getRadius() / parallaxForce;\n    const tmp = {\n      x: (mousePos.x - canvasCenter.x) * factor,\n      y: (mousePos.y - canvasCenter.y) * factor\n    };\n    particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n    particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n  }\n\n  getProximitySpeedFactor(particle) {\n    const container = this.container;\n    const options = container.actualOptions;\n    const active = Utils_1.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n    if (!active) {\n      return 1;\n    }\n\n    const mousePos = this.container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return 1;\n    }\n\n    const particlePos = particle.getPosition();\n    const dist = Utils_1.getDistance(mousePos, particlePos);\n    const radius = container.retina.slowModeRadius;\n\n    if (dist > radius) {\n      return 1;\n    }\n\n    const proximityFactor = dist / radius || 0;\n    const slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n  }\n\n}\n\nexports.Mover = Mover;","map":{"version":3,"sources":["/Users/enoquejonas/Desktop/Web Projects/smart_brain/node_modules/tsparticles/Core/Particle/Mover.js"],"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","applyDistance","particle","initialPosition","dx","dy","getDistances","position","dxFixed","Math","abs","dyFixed","hDistance","maxDistance","horizontal","vDistance","vertical","misplaced","velocity","x","y","pos","vel","random","constructor","container","move","delta","destroyed","moveParticle","moveParallax","_a","_b","_c","particleOptions","options","moveOptions","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","getRangeValue","speed","retina","pixelRatio","reduceFactor","moveDrift","drift","maxSize","getRangeMax","size","sizeFactor","getRadius","diffFactor","speedFactor","factor","applyPath","gravityOptions","gravity","gravityFactor","inverse","acceleration","decay","multTo","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","pow","zIndexFactor","velocityRate","spin","addTo","vibrate","sin","cos","updateFunc","direction","RotateDirection","clockwise","center","radius","angle","maxCanvasSize","max","canvas","width","height","particlesOptions","pathOptions","path","pathEnabled","lastPathTime","pathDelay","generator","pathGenerator","customGenerator","Plugins","getPathGenerator","generate","clamp","actualOptions","isSsr","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","parallaxSmooth","smooth","tmp","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","getDistance","slowModeRadius","proximityFactor","modes"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mover = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nfunction applyDistance(particle) {\n    const initialPosition = particle.initialPosition;\n    const { dx, dy } = Utils_1.getDistances(initialPosition, particle.position);\n    const dxFixed = Math.abs(dx), dyFixed = Math.abs(dy);\n    const hDistance = particle.maxDistance.horizontal;\n    const vDistance = particle.maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -Math.random();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -Math.random();\n        }\n    }\n}\nclass Mover {\n    constructor(container) {\n        this.container = container;\n    }\n    move(particle, delta) {\n        if (particle.destroyed) {\n            return;\n        }\n        this.moveParticle(particle, delta);\n        this.moveParallax(particle);\n    }\n    moveParticle(particle, delta) {\n        var _a, _b, _c;\n        const particleOptions = particle.options;\n        const moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = this.container, slowFactor = this.getProximitySpeedFactor(particle), baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : (particle.moveSpeed = Utils_1.getRangeValue(moveOptions.speed) * container.retina.pixelRatio)) *\n            container.retina.reduceFactor, moveDrift = ((_b = particle.moveDrift) !== null && _b !== void 0 ? _b : (particle.moveDrift = Utils_1.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio)), maxSize = Utils_1.getRangeMax(particleOptions.size.value) * container.retina.pixelRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, diffFactor = 2, speedFactor = (sizeFactor * slowFactor * delta.factor) / diffFactor, moveSpeed = baseSpeed * speedFactor;\n        this.applyPath(particle, delta);\n        const gravityOptions = moveOptions.gravity;\n        const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n        if (gravityOptions.enable) {\n            particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n        }\n        if (moveDrift && moveSpeed) {\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n        }\n        const decay = 1 - particle.options.move.decay;\n        if (decay != 1) {\n            particle.velocity.multTo(decay);\n        }\n        const velocity = particle.velocity.mult(moveSpeed);\n        const maxSpeed = (_c = particle.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n        if (gravityOptions.enable &&\n            gravityOptions.maxSpeed > 0 &&\n            ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed))) {\n            velocity.y = gravityFactor * maxSpeed;\n            if (moveSpeed) {\n                particle.velocity.y = velocity.y / moveSpeed;\n            }\n        }\n        const zIndexOptions = particle.options.zIndex, zVelocityFactor = Math.pow((1 - particle.zIndexFactor), zIndexOptions.velocityRate);\n        if (moveOptions.spin.enable) {\n            this.spin(particle, moveSpeed);\n        }\n        else {\n            if (zVelocityFactor != 1) {\n                velocity.multTo(zVelocityFactor);\n            }\n            particle.position.addTo(velocity);\n            if (moveOptions.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n            }\n        }\n        applyDistance(particle);\n    }\n    spin(particle, moveSpeed) {\n        const container = this.container;\n        if (!particle.spin) {\n            return;\n        }\n        const updateFunc = {\n            x: particle.spin.direction === Enums_1.RotateDirection.clockwise ? Math.cos : Math.sin,\n            y: particle.spin.direction === Enums_1.RotateDirection.clockwise ? Math.sin : Math.cos,\n        };\n        particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n        particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n        particle.spin.radius += particle.spin.acceleration;\n        const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n        if (particle.spin.radius > maxCanvasSize / 2) {\n            particle.spin.radius = maxCanvasSize / 2;\n            particle.spin.acceleration *= -1;\n        }\n        else if (particle.spin.radius < 0) {\n            particle.spin.radius = 0;\n            particle.spin.acceleration *= -1;\n        }\n        particle.spin.angle += (moveSpeed / 100) * (1 - particle.spin.radius / maxCanvasSize);\n    }\n    applyPath(particle, delta) {\n        const particlesOptions = particle.options;\n        const pathOptions = particlesOptions.move.path;\n        const pathEnabled = pathOptions.enable;\n        if (!pathEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastPathTime <= particle.pathDelay) {\n            particle.lastPathTime += delta.value;\n            return;\n        }\n        let generator = container.pathGenerator;\n        if (pathOptions.generator) {\n            const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n            if (customGenerator) {\n                generator = customGenerator;\n            }\n        }\n        const path = generator.generate(particle);\n        particle.velocity.addTo(path);\n        if (pathOptions.clamp) {\n            particle.velocity.x = Utils_1.clamp(particle.velocity.x, -1, 1);\n            particle.velocity.y = Utils_1.clamp(particle.velocity.y, -1, 1);\n        }\n        particle.lastPathTime -= particle.pathDelay;\n    }\n    moveParallax(particle) {\n        const container = this.container;\n        const options = container.actualOptions;\n        if (Utils_1.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const factor = particle.getRadius() / parallaxForce;\n        const tmp = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor(particle) {\n        const container = this.container;\n        const options = container.actualOptions;\n        const active = Utils_1.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = particle.getPosition();\n        const dist = Utils_1.getDistance(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\nexports.Mover = Mover;\n"]},"metadata":{},"sourceType":"script"}
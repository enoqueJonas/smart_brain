{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nconst Enums_1 = require(\"../Enums\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst Vector_1 = require(\"./Particle/Vector\");\n\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\n\nclass Particle {\n  constructor(id, container, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n\n    this.id = id;\n    this.container = container;\n    this.group = group;\n    this.fill = true;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.splitCount = 0;\n    this.misplaced = false;\n    this.loops = {\n      opacity: 0,\n      size: 0\n    };\n    this.maxDistance = {};\n    const pxRatio = container.retina.pixelRatio;\n    const options = container.actualOptions;\n    const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n    particlesOptions.load(options.particles);\n    const shapeType = particlesOptions.shape.type;\n    const reduceDuplicates = particlesOptions.reduceDuplicates;\n    this.shape = shapeType instanceof Array ? Utils_1.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n\n    if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n      if (overrideOptions.shape.type) {\n        const overrideShapeType = overrideOptions.shape.type;\n        this.shape = overrideShapeType instanceof Array ? Utils_1.itemFromArray(overrideShapeType, this.id, reduceDuplicates) : overrideShapeType;\n      }\n\n      const shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape) {\n        this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n      }\n    } else {\n      this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n      particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n    }\n\n    this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n    this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n    this.options = particlesOptions;\n    const zIndexValue = Utils_1.getRangeValue(this.options.zIndex.value);\n    this.pathDelay = Utils_1.getValue(this.options.move.path.delay) * 1000;\n    this.wobbleDistance = 0;\n    container.retina.initParticle(this);\n    const color = this.options.color;\n    const sizeOptions = this.options.size;\n    const sizeValue = Utils_1.getValue(sizeOptions) * container.retina.pixelRatio;\n    this.size = {\n      value: sizeValue,\n      max: Utils_1.getRangeMax(sizeOptions.value) * pxRatio,\n      min: Utils_1.getRangeMin(sizeOptions.value) * pxRatio\n    };\n    const sizeAnimation = sizeOptions.animation;\n\n    if (sizeAnimation.enable) {\n      this.size.status = Enums_1.AnimationStatus.increasing;\n      const sizeRange = Utils_1.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n      this.size.min = Utils_1.getRangeMin(sizeRange);\n      this.size.max = Utils_1.getRangeMax(sizeRange);\n\n      switch (sizeAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.size.value = this.size.min;\n          this.size.status = Enums_1.AnimationStatus.increasing;\n          break;\n\n        case Enums_1.StartValueType.random:\n          this.size.value = Utils_1.randomInRange(this.size);\n          this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.StartValueType.max:\n        default:\n          this.size.value = this.size.max;\n          this.size.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n\n      this.size.velocity = ((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n\n      if (!sizeAnimation.sync) {\n        this.size.velocity *= Math.random();\n      }\n    }\n\n    this.direction = Utils_1.getParticleDirectionAngle(this.options.move.direction);\n    this.bubble = {\n      inRange: false\n    };\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    const rotateOptions = this.options.rotate;\n    this.rotate = {\n      value: Utils_1.getRangeValue(rotateOptions.value) * Math.PI / 180\n    };\n    let rotateDirection = rotateOptions.direction;\n\n    if (rotateDirection === Enums_1.RotateDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n    }\n\n    switch (rotateDirection) {\n      case Enums_1.RotateDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.rotate.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.RotateDirection.clockwise:\n        this.rotate.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    const rotateAnimation = this.options.rotate.animation;\n\n    if (rotateAnimation.enable) {\n      this.rotate.velocity = rotateAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!rotateAnimation.sync) {\n        this.rotate.velocity *= Math.random();\n      }\n    }\n\n    const tiltOptions = this.options.tilt;\n    this.tilt = {\n      value: Utils_1.getRangeValue(tiltOptions.value) * Math.PI / 180,\n      sinDirection: Math.random() >= 0.5 ? 1 : -1,\n      cosDirection: Math.random() >= 0.5 ? 1 : -1\n    };\n    let tiltDirection = tiltOptions.direction;\n\n    if (tiltDirection === Enums_1.TiltDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n      tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n    }\n\n    switch (tiltDirection) {\n      case Enums_1.TiltDirection.counterClockwise:\n      case \"counterClockwise\":\n        this.tilt.status = Enums_1.AnimationStatus.decreasing;\n        break;\n\n      case Enums_1.TiltDirection.clockwise:\n        this.tilt.status = Enums_1.AnimationStatus.increasing;\n        break;\n    }\n\n    const tiltAnimation = this.options.tilt.animation;\n\n    if (tiltAnimation.enable) {\n      this.tilt.velocity = tiltAnimation.speed / 360 * container.retina.reduceFactor;\n\n      if (!tiltAnimation.sync) {\n        this.tilt.velocity *= Math.random();\n      }\n    }\n\n    const orbitOptions = particlesOptions.orbit;\n\n    if (orbitOptions.enable) {\n      this.orbitRotation = Utils_1.getRangeValue(orbitOptions.rotation.value);\n      this.orbitColor = Utils_1.colorToHsl(orbitOptions.color);\n    }\n\n    const hslColor = Utils_1.colorToHsl(color, this.id, reduceDuplicates);\n\n    if (hslColor) {\n      this.color = {\n        h: {\n          value: hslColor.h\n        },\n        s: {\n          value: hslColor.s\n        },\n        l: {\n          value: hslColor.l\n        }\n      };\n      const colorAnimation = this.options.color.animation;\n      this.setColorAnimation(colorAnimation.h, this.color.h);\n      this.setColorAnimation(colorAnimation.s, this.color.s);\n      this.setColorAnimation(colorAnimation.l, this.color.l);\n    }\n\n    const rollOpt = this.options.roll;\n\n    if (rollOpt.enable) {\n      if (this.color) {\n        if (rollOpt.backColor) {\n          this.backColor = Utils_1.colorToHsl(rollOpt.backColor);\n        } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n          this.alterType = Math.random() >= 0.5 ? Enums_1.AlterType.darken : Enums_1.AlterType.enlighten;\n          this.alterValue = this.alterType === Enums_1.AlterType.darken ? rollOpt.darken.value : rollOpt.enlighten.value;\n        } else if (rollOpt.darken.enable) {\n          this.alterType = Enums_1.AlterType.darken;\n          this.alterValue = rollOpt.darken.value;\n        } else if (rollOpt.enlighten.enable) {\n          this.alterType = Enums_1.AlterType.enlighten;\n          this.alterValue = rollOpt.enlighten.value;\n        }\n      }\n\n      this.rollAngle = Math.random() * Math.PI * 2;\n      this.rollSpeed = Utils_1.getRangeValue(rollOpt.speed) / 360;\n    } else {\n      this.rollAngle = 0;\n      this.rollSpeed = 0;\n    }\n\n    const wobbleOpt = this.options.wobble;\n\n    if (wobbleOpt.enable) {\n      this.wobbleAngle = Math.random() * Math.PI * 2;\n      this.wobbleSpeed = Utils_1.getRangeValue(wobbleOpt.speed) / 360;\n    } else {\n      this.wobbleAngle = 0;\n      this.wobbleSpeed = 0;\n    }\n\n    this.position = this.calcPosition(container, position, Utils_1.clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    this.offset = Vector_1.Vector.origin;\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    const opacityOptions = this.options.opacity;\n    this.opacity = {\n      max: Utils_1.getRangeMax(opacityOptions.value),\n      min: Utils_1.getRangeMin(opacityOptions.value),\n      value: Utils_1.getValue(opacityOptions)\n    };\n    const opacityAnimation = opacityOptions.animation;\n\n    if (opacityAnimation.enable) {\n      this.opacity.status = Enums_1.AnimationStatus.increasing;\n      const opacityRange = Utils_1.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n      this.opacity.min = Utils_1.getRangeMin(opacityRange);\n      this.opacity.max = Utils_1.getRangeMax(opacityRange);\n\n      switch (opacityAnimation.startValue) {\n        case Enums_1.StartValueType.min:\n          this.opacity.value = this.opacity.min;\n          this.opacity.status = Enums_1.AnimationStatus.increasing;\n          break;\n\n        case Enums_1.StartValueType.random:\n          this.opacity.value = Utils_1.randomInRange(this.opacity);\n          this.opacity.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n          break;\n\n        case Enums_1.StartValueType.max:\n        default:\n          this.opacity.value = this.opacity.max;\n          this.opacity.status = Enums_1.AnimationStatus.decreasing;\n          break;\n      }\n\n      this.opacity.velocity = opacityAnimation.speed / 100 * container.retina.reduceFactor;\n\n      if (!opacityAnimation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    this.stroke = this.options.stroke instanceof Array ? Utils_1.itemFromArray(this.options.stroke, this.id, reduceDuplicates) : this.options.stroke;\n    this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n    const strokeHslColor = (_h = Utils_1.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n\n    if (strokeHslColor) {\n      this.strokeColor = {\n        h: {\n          value: strokeHslColor.h\n        },\n        s: {\n          value: strokeHslColor.s\n        },\n        l: {\n          value: strokeHslColor.l\n        }\n      };\n      const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n\n      if (strokeColorAnimation && this.strokeColor) {\n        this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n        this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n        this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n      }\n    }\n\n    this.life = this.loadLife();\n    this.spawning = this.life.delay > 0;\n\n    if (this.options.move.spin.enable) {\n      const spinPos = (_k = this.options.move.spin.position) !== null && _k !== void 0 ? _k : {\n        x: 50,\n        y: 50\n      };\n      const spinCenter = {\n        x: spinPos.x / 100 * container.canvas.size.width,\n        y: spinPos.y / 100 * container.canvas.size.height\n      };\n      const pos = this.getPosition();\n      const distance = Utils_1.getDistance(pos, spinCenter);\n      this.spin = {\n        center: spinCenter,\n        direction: this.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise,\n        angle: this.velocity.angle,\n        radius: distance,\n        acceleration: Utils_1.getRangeValue(this.options.move.spin.acceleration)\n      };\n    }\n\n    this.shadowColor = Utils_1.colorToRgb(this.options.shadow.color);\n\n    if (drawer && drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleCreated) {\n        plugin.particleCreated(this);\n      }\n    }\n  }\n\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n\n  isInsideCanvas() {\n    const radius = this.getRadius();\n    const canvasSize = this.container.canvas.size;\n    return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n  }\n\n  draw(delta) {\n    const container = this.container;\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n\n    container.canvas.drawParticle(this, delta);\n  }\n\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n\n  getRadius() {\n    return this.bubble.radius || this.size.value;\n  }\n\n  getMass() {\n    const radius = this.getRadius();\n    return Math.pow(radius, 2) * Math.PI / 2;\n  }\n\n  getFillColor() {\n    if (this.bubble.color) {\n      return this.bubble.color;\n    }\n\n    const color = Utils_1.getHslFromAnimation(this.color);\n\n    if (color && (this.backColor || this.alterType && this.alterValue !== undefined)) {\n      const rolled = Math.floor(this.rollAngle / (Math.PI / 2)) % 2;\n\n      if (rolled) {\n        if (this.backColor) {\n          return this.backColor;\n        } else if (this.alterType && this.alterValue !== undefined) {\n          return {\n            h: color.h,\n            s: color.s,\n            l: color.l + (this.alterType === Enums_1.AlterType.darken ? -1 : 1) * this.alterValue\n          };\n        }\n      }\n    }\n\n    return color;\n  }\n\n  getStrokeColor() {\n    var _a, _b;\n\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n\n  destroy(override) {\n    this.destroyed = true;\n    this.bubble.inRange = false;\n\n    if (this.unbreakable) {\n      return;\n    }\n\n    this.destroyed = true;\n    this.bubble.inRange = false;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n\n    if (override) {\n      return;\n    }\n\n    const destroyOptions = this.options.destroy;\n\n    if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n      this.split();\n    }\n  }\n\n  reset() {\n    this.loops.opacity = 0;\n    this.loops.size = 0;\n  }\n\n  split() {\n    const splitOptions = this.options.destroy.split;\n\n    if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n      return;\n    }\n\n    const rate = Utils_1.getRangeValue(splitOptions.rate.value);\n\n    for (let i = 0; i < rate; i++) {\n      this.container.particles.addSplitParticle(this);\n    }\n  }\n\n  setColorAnimation(colorAnimation, colorValue) {\n    if (colorAnimation.enable) {\n      colorValue.velocity = colorAnimation.speed / 100 * this.container.retina.reduceFactor;\n\n      if (colorAnimation.sync) {\n        return;\n      }\n\n      colorValue.status = Enums_1.AnimationStatus.increasing;\n      colorValue.velocity *= Math.random();\n\n      if (colorValue.value) {\n        colorValue.value *= Math.random();\n      }\n    } else {\n      colorValue.velocity = 0;\n    }\n  }\n\n  calcPosition(container, position, zIndex, tryCount = 0) {\n    var _a, _b;\n\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n\n    const canvasSize = container.canvas.size;\n    const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n    const outMode = this.options.move.outMode;\n\n    if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n      if (pos.x > container.canvas.size.width - this.size.value * 2) {\n        pos.x -= this.size.value;\n      } else if (pos.x < this.size.value * 2) {\n        pos.x += this.size.value;\n      }\n    }\n\n    if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n      if (pos.y > container.canvas.size.height - this.size.value * 2) {\n        pos.y -= this.size.value;\n      } else if (pos.y < this.size.value * 2) {\n        pos.y += this.size.value;\n      }\n    }\n\n    if (this.checkOverlap(pos, tryCount)) {\n      return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n\n    return pos;\n  }\n\n  checkOverlap(pos, tryCount = 0) {\n    const overlapOptions = this.options.collisions.overlap;\n\n    if (!overlapOptions.enable) {\n      const retries = overlapOptions.retries;\n\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"Particle is overlapping and can't be placed\");\n      }\n\n      let overlaps = false;\n\n      for (const particle of this.container.particles.array) {\n        if (Utils_1.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n          overlaps = true;\n          break;\n        }\n      }\n\n      return overlaps;\n    }\n\n    return false;\n  }\n\n  calculateVelocity() {\n    const baseVelocity = Utils_1.getParticleBaseVelocity(this.direction);\n    const res = baseVelocity.copy();\n    const moveOptions = this.options.move;\n    const rad = Math.PI / 180 * moveOptions.angle.value;\n    const radOffset = Math.PI / 180 * moveOptions.angle.offset;\n    const range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n\n    if (!moveOptions.straight) {\n      res.angle += Utils_1.randomInRange(Utils_1.setRangeValue(range.left, range.right));\n    }\n\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= Math.random();\n    }\n\n    return res;\n  }\n\n  loadShapeData(shapeOptions, reduceDuplicates) {\n    const shapeData = shapeOptions.options[this.shape];\n\n    if (shapeData) {\n      return Utils_1.deepExtend({}, shapeData instanceof Array ? Utils_1.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n    }\n  }\n\n  loadLife() {\n    const container = this.container;\n    const particlesOptions = this.options;\n    const lifeOptions = particlesOptions.life;\n    const life = {\n      delay: container.retina.reduceFactor ? Utils_1.getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      delayTime: 0,\n      duration: container.retina.reduceFactor ? Utils_1.getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random()) / container.retina.reduceFactor * 1000 : 0,\n      time: 0,\n      count: particlesOptions.life.count\n    };\n\n    if (life.duration <= 0) {\n      life.duration = -1;\n    }\n\n    if (life.count <= 0) {\n      life.count = -1;\n    }\n\n    return life;\n  }\n\n}\n\nexports.Particle = Particle;","map":{"version":3,"sources":["/Users/enoquejonas/Desktop/Web Projects/smart_brain/node_modules/tsparticles/Core/Particle.js"],"names":["Object","defineProperty","exports","value","Particle","ParticlesOptions_1","require","Shape_1","Enums_1","Utils_1","Vector_1","Vector3d_1","constructor","id","container","position","overrideOptions","group","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","fill","close","lastPathTime","destroyed","unbreakable","splitCount","misplaced","loops","opacity","size","maxDistance","pxRatio","retina","pixelRatio","options","actualOptions","particlesOptions","ParticlesOptions","load","particles","shapeType","shape","type","reduceDuplicates","Array","itemFromArray","overrideShapeType","shapeOptions","Shape","shapeData","loadShapeData","undefined","zIndexValue","getRangeValue","zIndex","pathDelay","getValue","move","path","delay","wobbleDistance","initParticle","color","sizeOptions","sizeValue","max","getRangeMax","min","getRangeMin","sizeAnimation","animation","enable","status","AnimationStatus","increasing","sizeRange","setRangeValue","minimumValue","startValue","StartValueType","random","randomInRange","Math","decreasing","velocity","sizeAnimationSpeed","reduceFactor","sync","direction","getParticleDirectionAngle","bubble","inRange","initialVelocity","calculateVelocity","copy","rotateOptions","rotate","PI","rotateDirection","RotateDirection","index","floor","counterClockwise","clockwise","rotateAnimation","speed","tiltOptions","tilt","sinDirection","cosDirection","tiltDirection","TiltDirection","tiltAnimation","orbitOptions","orbit","orbitRotation","rotation","orbitColor","colorToHsl","hslColor","h","s","l","colorAnimation","setColorAnimation","rollOpt","roll","backColor","darken","enlighten","alterType","AlterType","alterValue","rollAngle","rollSpeed","wobbleOpt","wobble","wobbleAngle","wobbleSpeed","calcPosition","clamp","zLayers","initialPosition","offset","Vector","origin","needsSort","lastZIndex","z","zIndexFactor","opacityOptions","opacityAnimation","opacityRange","sides","drawer","drawers","get","Plugins","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","stroke","strokeWidth","width","strokeHslColor","getFillColor","strokeColor","strokeColorAnimation","life","loadLife","spawning","spin","spinPos","x","y","spinCenter","canvas","height","pos","getPosition","distance","getDistance","center","angle","radius","acceleration","shadowColor","colorToRgb","shadow","particleInit","plugin","plugins","particleCreated","isVisible","isInsideCanvas","getRadius","canvasSize","draw","delta","drawParticlePlugin","drawParticle","getMass","pow","getHslFromAnimation","rolled","getStrokeColor","destroy","override","particleDestroyed","destroyOptions","mode","DestroyMode","split","reset","splitOptions","count","rate","i","addSplitParticle","colorValue","tryCount","pluginPos","particlePosition","Vector3d","create","outMode","isInArray","OutMode","bounce","bounceHorizontal","bounceVertical","checkOverlap","overlapOptions","collisions","overlap","retries","Error","overlaps","particle","array","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","radOffset","range","left","right","straight","length","deepExtend","lifeOptions","delayTime","duration","time"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particle = void 0;\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nconst Vector_1 = require(\"./Particle/Vector\");\nconst Vector3d_1 = require(\"./Particle/Vector3d\");\nclass Particle {\n    constructor(id, container, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        this.id = id;\n        this.container = container;\n        this.group = group;\n        this.fill = true;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.splitCount = 0;\n        this.misplaced = false;\n        this.loops = {\n            opacity: 0,\n            size: 0,\n        };\n        this.maxDistance = {};\n        const pxRatio = container.retina.pixelRatio;\n        const options = container.actualOptions;\n        const particlesOptions = new ParticlesOptions_1.ParticlesOptions();\n        particlesOptions.load(options.particles);\n        const shapeType = particlesOptions.shape.type;\n        const reduceDuplicates = particlesOptions.reduceDuplicates;\n        this.shape = shapeType instanceof Array ? Utils_1.itemFromArray(shapeType, this.id, reduceDuplicates) : shapeType;\n        if (overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) {\n            if (overrideOptions.shape.type) {\n                const overrideShapeType = overrideOptions.shape.type;\n                this.shape =\n                    overrideShapeType instanceof Array\n                        ? Utils_1.itemFromArray(overrideShapeType, this.id, reduceDuplicates)\n                        : overrideShapeType;\n            }\n            const shapeOptions = new Shape_1.Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape) {\n                this.shapeData = this.loadShapeData(shapeOptions, reduceDuplicates);\n            }\n        }\n        else {\n            this.shapeData = this.loadShapeData(particlesOptions.shape, reduceDuplicates);\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles) !== undefined) {\n            particlesOptions.load((_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.particles);\n        }\n        this.fill = (_d = (_c = this.shapeData) === null || _c === void 0 ? void 0 : _c.fill) !== null && _d !== void 0 ? _d : this.fill;\n        this.close = (_f = (_e = this.shapeData) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : this.close;\n        this.options = particlesOptions;\n        const zIndexValue = Utils_1.getRangeValue(this.options.zIndex.value);\n        this.pathDelay = Utils_1.getValue(this.options.move.path.delay) * 1000;\n        this.wobbleDistance = 0;\n        container.retina.initParticle(this);\n        const color = this.options.color;\n        const sizeOptions = this.options.size;\n        const sizeValue = Utils_1.getValue(sizeOptions) * container.retina.pixelRatio;\n        this.size = {\n            value: sizeValue,\n            max: Utils_1.getRangeMax(sizeOptions.value) * pxRatio,\n            min: Utils_1.getRangeMin(sizeOptions.value) * pxRatio,\n        };\n        const sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            this.size.status = Enums_1.AnimationStatus.increasing;\n            const sizeRange = Utils_1.setRangeValue(sizeOptions.value, sizeAnimation.minimumValue * pxRatio);\n            this.size.min = Utils_1.getRangeMin(sizeRange);\n            this.size.max = Utils_1.getRangeMax(sizeRange);\n            switch (sizeAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.size.value = this.size.min;\n                    this.size.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.size.value = Utils_1.randomInRange(this.size);\n                    this.size.status = Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.size.velocity =\n                (((_g = this.sizeAnimationSpeed) !== null && _g !== void 0 ? _g : container.retina.sizeAnimationSpeed) / 100) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                this.size.velocity *= Math.random();\n            }\n        }\n        this.direction = Utils_1.getParticleDirectionAngle(this.options.move.direction);\n        this.bubble = {\n            inRange: false,\n        };\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        const rotateOptions = this.options.rotate;\n        this.rotate = {\n            value: (Utils_1.getRangeValue(rotateOptions.value) * Math.PI) / 180,\n        };\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === Enums_1.RotateDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            rotateDirection = index > 0 ? Enums_1.RotateDirection.counterClockwise : Enums_1.RotateDirection.clockwise;\n        }\n        switch (rotateDirection) {\n            case Enums_1.RotateDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.rotate.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.RotateDirection.clockwise:\n                this.rotate.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const rotateAnimation = this.options.rotate.animation;\n        if (rotateAnimation.enable) {\n            this.rotate.velocity = (rotateAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                this.rotate.velocity *= Math.random();\n            }\n        }\n        const tiltOptions = this.options.tilt;\n        this.tilt = {\n            value: (Utils_1.getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: Math.random() >= 0.5 ? 1 : -1,\n            cosDirection: Math.random() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === Enums_1.TiltDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            tiltDirection = index > 0 ? Enums_1.TiltDirection.counterClockwise : Enums_1.TiltDirection.clockwise;\n        }\n        switch (tiltDirection) {\n            case Enums_1.TiltDirection.counterClockwise:\n            case \"counterClockwise\":\n                this.tilt.status = Enums_1.AnimationStatus.decreasing;\n                break;\n            case Enums_1.TiltDirection.clockwise:\n                this.tilt.status = Enums_1.AnimationStatus.increasing;\n                break;\n        }\n        const tiltAnimation = this.options.tilt.animation;\n        if (tiltAnimation.enable) {\n            this.tilt.velocity = (tiltAnimation.speed / 360) * container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                this.tilt.velocity *= Math.random();\n            }\n        }\n        const orbitOptions = particlesOptions.orbit;\n        if (orbitOptions.enable) {\n            this.orbitRotation = Utils_1.getRangeValue(orbitOptions.rotation.value);\n            this.orbitColor = Utils_1.colorToHsl(orbitOptions.color);\n        }\n        const hslColor = Utils_1.colorToHsl(color, this.id, reduceDuplicates);\n        if (hslColor) {\n            this.color = {\n                h: {\n                    value: hslColor.h,\n                },\n                s: {\n                    value: hslColor.s,\n                },\n                l: {\n                    value: hslColor.l,\n                },\n            };\n            const colorAnimation = this.options.color.animation;\n            this.setColorAnimation(colorAnimation.h, this.color.h);\n            this.setColorAnimation(colorAnimation.s, this.color.s);\n            this.setColorAnimation(colorAnimation.l, this.color.l);\n        }\n        const rollOpt = this.options.roll;\n        if (rollOpt.enable) {\n            if (this.color) {\n                if (rollOpt.backColor) {\n                    this.backColor = Utils_1.colorToHsl(rollOpt.backColor);\n                }\n                else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n                    this.alterType = Math.random() >= 0.5 ? Enums_1.AlterType.darken : Enums_1.AlterType.enlighten;\n                    this.alterValue =\n                        this.alterType === Enums_1.AlterType.darken ? rollOpt.darken.value : rollOpt.enlighten.value;\n                }\n                else if (rollOpt.darken.enable) {\n                    this.alterType = Enums_1.AlterType.darken;\n                    this.alterValue = rollOpt.darken.value;\n                }\n                else if (rollOpt.enlighten.enable) {\n                    this.alterType = Enums_1.AlterType.enlighten;\n                    this.alterValue = rollOpt.enlighten.value;\n                }\n            }\n            this.rollAngle = Math.random() * Math.PI * 2;\n            this.rollSpeed = Utils_1.getRangeValue(rollOpt.speed) / 360;\n        }\n        else {\n            this.rollAngle = 0;\n            this.rollSpeed = 0;\n        }\n        const wobbleOpt = this.options.wobble;\n        if (wobbleOpt.enable) {\n            this.wobbleAngle = Math.random() * Math.PI * 2;\n            this.wobbleSpeed = Utils_1.getRangeValue(wobbleOpt.speed) / 360;\n        }\n        else {\n            this.wobbleAngle = 0;\n            this.wobbleSpeed = 0;\n        }\n        this.position = this.calcPosition(container, position, Utils_1.clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        this.offset = Vector_1.Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        const opacityOptions = this.options.opacity;\n        this.opacity = {\n            max: Utils_1.getRangeMax(opacityOptions.value),\n            min: Utils_1.getRangeMin(opacityOptions.value),\n            value: Utils_1.getValue(opacityOptions),\n        };\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            this.opacity.status = Enums_1.AnimationStatus.increasing;\n            const opacityRange = Utils_1.setRangeValue(opacityOptions.value, opacityAnimation.minimumValue);\n            this.opacity.min = Utils_1.getRangeMin(opacityRange);\n            this.opacity.max = Utils_1.getRangeMax(opacityRange);\n            switch (opacityAnimation.startValue) {\n                case Enums_1.StartValueType.min:\n                    this.opacity.value = this.opacity.min;\n                    this.opacity.status = Enums_1.AnimationStatus.increasing;\n                    break;\n                case Enums_1.StartValueType.random:\n                    this.opacity.value = Utils_1.randomInRange(this.opacity);\n                    this.opacity.status =\n                        Math.random() >= 0.5 ? Enums_1.AnimationStatus.increasing : Enums_1.AnimationStatus.decreasing;\n                    break;\n                case Enums_1.StartValueType.max:\n                default:\n                    this.opacity.value = this.opacity.max;\n                    this.opacity.status = Enums_1.AnimationStatus.decreasing;\n                    break;\n            }\n            this.opacity.velocity = (opacityAnimation.speed / 100) * container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                this.opacity.velocity *= Math.random();\n            }\n        }\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.stroke =\n            this.options.stroke instanceof Array\n                ? Utils_1.itemFromArray(this.options.stroke, this.id, reduceDuplicates)\n                : this.options.stroke;\n        this.strokeWidth = this.stroke.width * container.retina.pixelRatio;\n        const strokeHslColor = (_h = Utils_1.colorToHsl(this.stroke.color)) !== null && _h !== void 0 ? _h : this.getFillColor();\n        if (strokeHslColor) {\n            this.strokeColor = {\n                h: {\n                    value: strokeHslColor.h,\n                },\n                s: {\n                    value: strokeHslColor.s,\n                },\n                l: {\n                    value: strokeHslColor.l,\n                },\n            };\n            const strokeColorAnimation = (_j = this.stroke.color) === null || _j === void 0 ? void 0 : _j.animation;\n            if (strokeColorAnimation && this.strokeColor) {\n                this.setColorAnimation(strokeColorAnimation.h, this.strokeColor.h);\n                this.setColorAnimation(strokeColorAnimation.s, this.strokeColor.s);\n                this.setColorAnimation(strokeColorAnimation.l, this.strokeColor.l);\n            }\n        }\n        this.life = this.loadLife();\n        this.spawning = this.life.delay > 0;\n        if (this.options.move.spin.enable) {\n            const spinPos = (_k = this.options.move.spin.position) !== null && _k !== void 0 ? _k : { x: 50, y: 50 };\n            const spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            };\n            const pos = this.getPosition();\n            const distance = Utils_1.getDistance(pos, spinCenter);\n            this.spin = {\n                center: spinCenter,\n                direction: this.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise,\n                angle: this.velocity.angle,\n                radius: distance,\n                acceleration: Utils_1.getRangeValue(this.options.move.spin.acceleration),\n            };\n        }\n        this.shadowColor = Utils_1.colorToRgb(this.options.shadow.color);\n        if (drawer && drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleCreated) {\n                plugin.particleCreated(this);\n            }\n        }\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius();\n        const canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        return this.bubble.radius || this.size.value;\n    }\n    getMass() {\n        const radius = this.getRadius();\n        return (Math.pow(radius, 2) * Math.PI) / 2;\n    }\n    getFillColor() {\n        if (this.bubble.color) {\n            return this.bubble.color;\n        }\n        const color = Utils_1.getHslFromAnimation(this.color);\n        if (color && (this.backColor || (this.alterType && this.alterValue !== undefined))) {\n            const rolled = Math.floor(this.rollAngle / (Math.PI / 2)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                else if (this.alterType && this.alterValue !== undefined) {\n                    return {\n                        h: color.h,\n                        s: color.s,\n                        l: color.l + (this.alterType === Enums_1.AlterType.darken ? -1 : 1) * this.alterValue,\n                    };\n                }\n            }\n        }\n        return color;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : Utils_1.getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    destroy(override) {\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        if (this.unbreakable) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        if (override) {\n            return;\n        }\n        const destroyOptions = this.options.destroy;\n        if (destroyOptions.mode === Enums_1.DestroyMode.split) {\n            this.split();\n        }\n    }\n    reset() {\n        this.loops.opacity = 0;\n        this.loops.size = 0;\n    }\n    split() {\n        const splitOptions = this.options.destroy.split;\n        if (splitOptions.count >= 0 && this.splitCount++ > splitOptions.count) {\n            return;\n        }\n        const rate = Utils_1.getRangeValue(splitOptions.rate.value);\n        for (let i = 0; i < rate; i++) {\n            this.container.particles.addSplitParticle(this);\n        }\n    }\n    setColorAnimation(colorAnimation, colorValue) {\n        if (colorAnimation.enable) {\n            colorValue.velocity = (colorAnimation.speed / 100) * this.container.retina.reduceFactor;\n            if (colorAnimation.sync) {\n                return;\n            }\n            colorValue.status = Enums_1.AnimationStatus.increasing;\n            colorValue.velocity *= Math.random();\n            if (colorValue.value) {\n                colorValue.value *= Math.random();\n            }\n        }\n        else {\n            colorValue.velocity = 0;\n        }\n    }\n    calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d_1.Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size;\n        const pos = Vector3d_1.Vector3d.create((_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height, zIndex);\n        const outMode = this.options.move.outMode;\n        if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n            if (pos.x > container.canvas.size.width - this.size.value * 2) {\n                pos.x -= this.size.value;\n            }\n            else if (pos.x < this.size.value * 2) {\n                pos.x += this.size.value;\n            }\n        }\n        if (Utils_1.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n            if (pos.y > container.canvas.size.height - this.size.value * 2) {\n                pos.y -= this.size.value;\n            }\n            else if (pos.y < this.size.value * 2) {\n                pos.y += this.size.value;\n            }\n        }\n        if (this.checkOverlap(pos, tryCount)) {\n            return this.calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    checkOverlap(pos, tryCount = 0) {\n        const overlapOptions = this.options.collisions.overlap;\n        if (!overlapOptions.enable) {\n            const retries = overlapOptions.retries;\n            if (retries >= 0 && tryCount > retries) {\n                throw new Error(\"Particle is overlapping and can't be placed\");\n            }\n            let overlaps = false;\n            for (const particle of this.container.particles.array) {\n                if (Utils_1.getDistance(pos, particle.position) < this.size.value + particle.size.value) {\n                    overlaps = true;\n                    break;\n                }\n            }\n            return overlaps;\n        }\n        return false;\n    }\n    calculateVelocity() {\n        const baseVelocity = Utils_1.getParticleBaseVelocity(this.direction);\n        const res = baseVelocity.copy();\n        const moveOptions = this.options.move;\n        const rad = (Math.PI / 180) * moveOptions.angle.value;\n        const radOffset = (Math.PI / 180) * moveOptions.angle.offset;\n        const range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += Utils_1.randomInRange(Utils_1.setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= Math.random();\n        }\n        return res;\n    }\n    loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return Utils_1.deepExtend({}, shapeData instanceof Array ? Utils_1.itemFromArray(shapeData, this.id, reduceDuplicates) : shapeData);\n        }\n    }\n    loadLife() {\n        const container = this.container;\n        const particlesOptions = this.options;\n        const lifeOptions = particlesOptions.life;\n        const life = {\n            delay: container.retina.reduceFactor\n                ? ((Utils_1.getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            delayTime: 0,\n            duration: container.retina.reduceFactor\n                ? ((Utils_1.getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : Math.random())) /\n                    container.retina.reduceFactor) *\n                    1000\n                : 0,\n            time: 0,\n            count: particlesOptions.life.count,\n        };\n        if (life.duration <= 0) {\n            life.duration = -1;\n        }\n        if (life.count <= 0) {\n            life.count = -1;\n        }\n        return life;\n    }\n}\nexports.Particle = Particle;\n"]},"metadata":{},"sourceType":"script"}